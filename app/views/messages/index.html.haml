.row.wrapper.border-bottom.white-bg.page-heading
  .col-lg-10
    %h2= @device.description
    %ol.breadcrumb
      %li= link_to "Projects", projects_path
      %li= link_to @project.projectId, project_devices_path(@project.projectId)
      %li.active= link_to @device.description, project_device_messages_path(@project.projectId, @device.devEUI)

= render partial: 'chart'

.wrapper.wrapper-content.animated.fadeInRight
  .row
    .col-lg-12
      .ibox.float-e-margins
        .ibox-title
          %h5 Sensor data

        .ibox-content

          %table.table.table-striped.table-bordered.table-hover#sensor_data
            %thead
              %th Created at
              - if @messages.first && @messages.first.attributes
                - @messages.first.attributes.keys.each do |attribute|
                  %th
                    = attribute.humanize
                    = attr_unit(@messages.first, attribute)

            %tbody
              -#   - @messages.each do |message|
              -#     = render partial: message

:javascript

  $(function() {

      $('#sensor_data').DataTable({
          processing: true,
          serverSide: true,
          ajax: function(data, callback, settings) {
              // make a regular ajax request using data.start and data.length
              $.get('#{project_device_messages_path(@project.projectId, @device.devEUI, format: :json)}', {
                  limit: data.length,
                  offset: data.start,
                  page: data.start/data.length,
              }, function(res) {
                  // map your server's response to the DataTables format and pass it to
                  // DataTables' callback
                  callback({
                      recordsTotal: res.meta.total_count,
                      recordsFiltered: res.meta.total_count,
                      data: res.data
                  });
              });
          },
          aoColumns: #{ ([:created_at] + @messages.first.attributes.keys).map{ |a| { data: a, orderable: true } }.to_json },
          pagingType: 'full_numbers',
          pageLength: 25,
          searching: false,
          //order: [[ 0, "desc" ]],
          dataType: "json",
          columnDefs: [ {
            targets: 0,
            render: $.fn.dataTable.render.moment('YYYY-MM-DDTHH:mm:ss.SSSZZ', 'DD. MM. YYYY HH:mm:ss')
          } ],
          fnDrawCallback: function(oSettings) {
            if (#{@displays.try(:first).try(:first) == :line_chart}) {
              new Chartkick.LineChart("chart-1", "#{chart_project_device_messages_path(settings: @displays.try(:first).try(:last))}" + "&limit=" + oSettings.oAjaxData.length + "&page=" + oSettings.oAjaxData.start/oSettings.oAjaxData.length, {discrete: true});
            }
            if (#{@displays.try(:first).try(:first) == :map}) {
              if (typeof GMap.map === 'undefined') {
                GMap.map = Gmaps.build('Google');
                GMap.map.buildMap({ provider: {}, internal: { id: 'map' }}, function() {
                  GMap.getMarkers("#{ map_markers_project_device_messages_path }", oSettings);
                });
              } else {
                GMap.getMarkers("#{ map_markers_project_device_messages_path }", oSettings);
              }
            }
          },
          dom: "<'row'<'col-sm-12'l>>" +
          "<'row'<'col-sm-5'i><'col-sm-6'p>>" +
          "<'row'<'col-sm-12'tr>>" +
          "<'row'<'col-sm-5'i><'col-sm-7'p>>",
      });

  });
